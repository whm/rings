#!/usr/bin/perl
#
# ring-load - load pictures into a ring database
#

use strict;
use Cwd;
use DBI;
use File::Copy;
use File::Slurp;
use File::Spec;
use Getopt::Long;
use Image::ExifTool 'ImageInfo';
use Image::Magick;
use Pod::Usage;
use Rings::Common;

my $CNT        = 0;
my %MIME_TYPES = ();
my %SIZE_IDS   = ();

my $opt_conf;
my $opt_debug;
my $opt_force;
my $opt_help;
my $opt_manual;
my $opt_path = './';

##############################################################################
# Subroutines
##############################################################################

# ------------------------------------------------
# return regex target string with all files types supported

sub get_file_types {
    my %file_types = ();
    for my $t (keys %MIME_TYPES) {
        $file_types{ $MIME_TYPES{$t} }++;
    }
    my $type_list = '';
    my $or        = '(';
    for my $t (keys %file_types) {
        $type_list .= $or . $t;
        $or = '|';
    }
    if ($or eq '|') {
        $type_list .= ')';
    }
    return $type_list;
}

# ------------------------------------------------
# process the files

sub save_file {

    (my $a_file) = @_;

    $CNT++;

    # Pull out the file name, the file type, and the parent directory
    my $a_fullname = File::Spec->rel2abs($a_file);
    my ($a_vol, $a_dirlist, $a_filename) = File::Spec->splitpath($a_fullname);
    my $a_filetype = '';
    if ($a_filename =~ /^(.*?)\.(.*)/xms) {
        $a_filename = $1;
        $a_filetype = $2;
    }
    $a_dirlist =~ s{^/}{}xms;
    $a_dirlist =~ s{/$}{}xms;
    my @dirs     = File::Spec->splitdir($a_dirlist);
    my $a_parent = $dirs[-1];

    my $blob = read_file("$a_file", binmode => ':raw');
    my %pic = get_meta_data($blob);

    # Check for duplicate picture
    my $sql = "SELECT pid FROM pictures_information ";
    $sql .= "WHERE raw_picture_size = ? ";
    $sql .= "AND camera = ? ";
    $sql .= "AND shutter_speed = ? ";
    $sql .= "AND fstop = ?";
    if ($opt_debug) {
        dbg($sql);
    }
    my $sth = $DBH->prepare($sql);
    $sth->execute($pic{size}, $pic{camera}, $pic{shutterspeed},
        $pic{this_fnumber});
    my $dup_cnt = 0;

    while (my $row = $sth->fetchrow_hashref()) {
        $dup_cnt++;
        print "File $a_file duplicates $row->{pid}\n";
    }
    if ($dup_cnt and !$opt_force) {
        print "SKIPPING: $a_file\n";
        return;
    }

    # Set the PID
    my $pid = get_next_id("pid");

    # Store meta-data and copy the raw picture to rings directory
    my $pic_path = create_picture_dirs($a_parent, 'raw');
    my $pic_file = "${pic_path}/${pid}.${a_filetype}";
    $pic{'in_file'} = $pic_file;
    store_meta_data($pid, $a_fullname, \%pic);
    copy($a_file, $pic_file)
      or msg('fatal', "Problem copying $a_file to $pic_path");

    dbg("  Creating elements for picture record $pid");
    foreach my $s (sort keys %SIZE_IDS) {
        my $pic = create_picture($pid, $s, $pic{'picture'}, $pic{'MIMEType'});
        if ($s ne 'raw') {
            my $ppath = create_picture_dirs($a_parent, $s);
            my $pfile = "${ppath}/${pid}.${a_filetype}";
            open(my $fh, '>', $pfile);
            print $fh $pic;
            close $fh;
        }
    }

    return;
}

##############################################################################
# Main Routine
##############################################################################

print ">>> ring-load    v:18-Sep-2016\n";

# -- get options
GetOptions(
    'conf=s' => \$opt_conf,
    'debug'  => \$opt_debug,
    'force'  => \$opt_force,
    'help'   => \$opt_help,
    'manual' => \$opt_manual,
    'path=s' => \$opt_path,
);

# -- help the poor souls out
if (@ARGV && $ARGV[0] == 'help') {
    $opt_help = 1;
}
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

get_config($opt_conf);

if ($opt_debug) {
    $CONF->debug($opt_debug);
}
if ($CONF->debug) {
    dbg("Initialize timer.");
}

# -- Open up connections to the MySQL data
db_connect();

%MIME_TYPES = get_picture_types();
my $type_list = get_file_types();

%SIZE_IDS = get_picture_sizes();

print "Examining files that match ${opt_path}*.${type_list}\n";

my @file_list = glob($opt_path . '*');
foreach my $f (@file_list) {
    if ($f =~ /(.*?)\.$type_list$/xmsi) {
        if ($CONF->debug) {
            dbg("    Saving file: $f");
        }
        save_file($f);
    }
}

print "$CNT pictures processed\n";

exit;

__END__

=head1 NAME

ring-load

=head1 SYNOPSIS

 ring=load [--path=directory-path] [--update] \
              [--host=mysql-host] [--db=dbname] \
              --user=mysql-username --pass=mysql-password \
              [--force] [--keyword=string] [--datetaken=string] \
              [--ppe=string] [--photographer=string] \
              [--debug] [--help] [--manual]


=head1 DESCRIPTION

This script reads the jpeg files in a directory and loads the rings
database.  Most command line options can also be specified in a
preferences file, ~/.rings.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --path=directory-path

An optional parameter.  If no directory path is specified then . is
used.

=item --host=mysql-hostname

MySQL host name.  If not specified then localhost is used.

=item --db=database-name

MySQL database name.  If not specified then rings is used.

=item --user=mysql-username

MySQL username.  Required.

=item --host=mysql-password

MySQL password.  Required.

=item --force

Override duplicate detection and sort the pictures anyway.

=item --keyword=string

A string of keywords.  If not is specified then "NEW" is used.

=item --datetaken=string

A string representing the starting date and time.  If not is specified
the current date and time is used as a starting point and incremented
by 1 second for each picture.

=item --photographer=string

The photograper's name.  If none is specified then null.

=item --ppe=string

Picture, place or event.

=item --update

Actually load the data into the rings database.

=item --help

Displays help text.

=item --manual

Displays more complete help text.

=item --debug

Turns on debugging displays.

=back

=head1 AUTHOR

Bill MacAllister <bill@macallister.grass-valley.ca.us>

=cut
