#!/usr/bin/perl
#
# ring-set-db-signature - Set the picture-id in the pictures_information table.

use AppConfig qw(:argcount :expand);
use Carp;
use Cwd;
use DBI;
use File::Copy;
use File::Find;
use Getopt::Long;
use Image::ExifTool 'ImageInfo';
use Image::Magick;
use Pod::Usage;
use strict;
use Time::Local;

my $CNT;
my $CONF;
my $DBH;
my $DEBUG_TIME;

my $opt_conf = 'rings.conf';
my $opt_example;
my $opt_debug;
my $opt_force;
my $opt_help;
my $opt_limit;
my $opt_manual;
my $opt_update;

# ------------------------------------------------
# output debugging information

sub dbg {
    
    (my $tmp) = @_;
    
    my $now = time;
    my $elapsed = $now - $DEBUG_TIME;
    print "$now ($elapsed) $tmp \n";
    $DEBUG_TIME = $now;
    return;
    
}

# ------------------------------------------------
# Read configuration

sub read_conf {
    my $conf_file = '/etc/whm/rings.fix';
    if ($opt_conf) {
        $conf_file = $opt_conf;
    }

    my $conf = AppConfig->new({});
    $conf->define(
        'ring_root',
        {
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => '/opt/rings'
        }
    );
    $conf->define(
        'db_host',
        {
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => 'localhost'
        }
    );
    $conf->define(
        'db_name',
        {
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => 'rings'
        }
    );
    $conf->define(
        'db_credentials',
        {
            ARGCOUNT => ARGCOUNT_ONE,
            DEFAULT  => '/etc/whm/rings_db.conf'
        }
    );

    if (-e $conf_file) {
        $conf->file($conf_file);
    } else {
        die("Configuration file is required");
    }

    # Read database credentials and add them to the $conf structure
    my $db_conf = AppConfig->new({});
    $db_conf->define('db_user', { ARGCOUNT => ARGCOUNT_ONE } );
    $db_conf->define('db_pass', { ARGCOUNT => ARGCOUNT_ONE } );
    if (-e $conf->db_credentials()) {
        $db_conf->file($conf->db_credentials());
    } else {
        msg('INFO: db_credentials = ' . $conf->db_credentials . "\n");
        die("Data base password and user required in configuration file.");
    }
    $conf->define('db_user');
    $conf->db_user($db_conf->db_user());
    $conf->define('db_pass');
    $conf->db_pass($db_conf->db_pass());
    
    return $conf;
}

sub example_conf {

    msg("# ----------------------------------------------------\n");
    msg("# Example /etc/whm/rings.conf\n");
    msg("#\n");
    msg("ring_root = /opt/rings\n");
    msg("db_host = localhost\n");
    msg("db_name = rings\n");
    msg("db_credentials = /etc/whm/rings_db.conf\n");
    msg("\n");
    msg("# ----------------------------------------------------\n");
    msg("# Example /etc/whm/rings_db.conf\n");
    msg("# ----------------------------------------------------\n");
    msg("#\n");
    msg("db_user = rings\n");
    msg("db_pass = pass\n");
    return;
}

# ------------------------------------------------
# Read picture sizes

sub read_picture_sizes {
    
    my $sel = "SELECT size_id, max_height, max_width ";
    $sel .= "FROM picture_sizes";
    if ($opt_debug) {dbg($sel);}
    my $sth = $DBH->prepare ($sel);
    $sth->execute();
    my %sizes = ();
    while (my $row = $sth->fetchrow_hashref) {
        $sizes{ $row->{size_id} }{'x'}     = $row->{max_width};
        $sizes{ $row->{size_id} }{'y'}     = $row->{max_height};
    }
    return %sizes;
}

# ------------------------------------------------------------------------
# Return the picture image for a single picture.  Getting them one
# at a time preserves memory and in the end is faster because there
# is no swapping.

sub get_a_picture {
    my ($this_table, $pid) = @_;
    my $sel = "SELECT picture FROM $this_table WHERE pid = ? ";
    if ($opt_debug) {dbg($sel);}
    my $sth = $DBH->prepare ($sel);
    $sth->execute($pid);
    my $pic;
    while (my $row = $sth->fetchrow_hashref) {
        $pic  = $row->{picture};
    }
    return $pic;
}

# ------------------------------------------------
# Generate a picture signature for all of the pictures in a 
# table.

sub update_picture_ids {
    my ($this_table) = @_;
    
    my $cmd = "UPDATE $this_table SET width = ?, ";
    $cmd .= 'height = ?, ';
    $cmd .= 'size = ?, ';
    $cmd .= 'signature = ? ';
    $cmd .= 'WHERE pid = ? ';
    if ($opt_debug) {dbg ($cmd);}
    my $sth_update = $DBH->prepare ($cmd);
    
    my $sel = "SELECT pid, signature FROM $this_table ";
    $sel .= "ORDER BY pid ";
    if ($opt_limit) {
        $sel .= "limit 0,$opt_limit";
    }
    if ($opt_debug) {dbg($sel);}
    my $sth = $DBH->prepare ($sel);
    $sth->execute();
    while (my $row = $sth->fetchrow_hashref) {
        my $this_pid  = $row->{pid};
        my $signature = $row->{signature};
        if (length($signature) > 0 && !$opt_force) {
            next;
        }
        my $this_pic = get_a_picture($this_table, $this_pid);
        if (!$this_pic) {
            print "WARN: problem getting $this_pid from $this_table\n";
            next;
        }
        my $img = Image::Magick->new();
        $img->Read(blob => $this_pic);
        my ($width, 
            $height, 
            $size, 
            $format, 
            $compression,
            $signature) 
            = $img->Get('width',
                        'height',
                        'filesize',
                        'format',
                        'compression',
                        'signature');
        $signature =~ s/\s+//xmsg;
        if ($opt_update) {
            printf("Setting: pid=%s width=%s height=%s signature=%s\n",
                   $row->{pid}, $width, $height, $signature);
            $sth_update->execute($width,
                                 $height,
                                 $size,
                                 $signature,
                                 $this_pid);
        } else {
            printf("Proposing: pid=%s width=%s height=%s signature=%s\n",
                   $row->{pid}, $width, $height, $signature);
        }
    }
    return;
}

##############################################################################
# Main Routine
##############################################################################

print ">>> ring-set-db-signature\n";

$| = 1;

# -- get options
GetOptions(
    'conf=s'  => \$opt_conf,
    'debug'   => \$opt_debug,
    'force'   => \$opt_force,
    'help'    => \$opt_help,
    'limit=i' => \$opt_limit,
    'manual'  => \$opt_manual,
    'update'  => \$opt_update
    );

# -- help the poor souls out
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

if ($opt_debug) {dbg('Initialzie debugging');}

# -- Open up connections to the MySQL data

$CONF = read_conf();

# -- Open up connections to the MySQL data
my $db_host = $CONF->db_host();
my $db_name = $CONF->db_name();
my $dbi     = "dbi:mysql:host=$db_host;database=$db_name";
$DBH = DBI->connect ($dbi, $CONF->db_user(), $CONF->db_pass())
    or die "ERROR: Can't connect to database $dbi for read\n";
$DBH->{LongTruncOk} = 1;
$DBH->{LongReadLen} = 10000000;

my %sizes = read_picture_sizes();
for my $id (sort keys %sizes) {
    update_picture_ids($id);
}

$DBH->disconnect
    or croak("ERROR: Disconnect failed for $dbi (read)");

exit;

__END__

=head1 NAME

ring-set-db-signature

=head1 SYNOPSIS

ring-set-db-signature [--force] [--conf=file] [--example] [--debug]
[--help] [--manual]


=head1 DESCRIPTION

Update the picture_id field in the pictures_information table.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --force

Force an update even if the picture's signature is already set.  The
default is to skip entries that already have the signature set.

=item --conf=file

Configuration file.

=item --example

Print an example configuration file.

=item --db-user=mysql-username

MySQL username.  Required.

=item --db-host=mysql-password

MySQL password.  Required.

=item --help

Displays help text.

=item --manual

Displays more complete help text.

=item --debug

Turns on debugging displays.

=back

=head1 AUTHOR

Bill MacAllister <bill@ca-zephyr.org>

=cut

