#!/usr/bin/perl
#
# ring-db2files - Convert from database picture storage to files based
# storage.
#
# Author: Bill MacAllister <bill@ca-zephyr.org>
# Copyright Bill MacAllister 2016

use DBI;
use File::Basename;
use Getopt::Long;
use Pod::Usage;
use strict;
use Time::Local;
use Rings::Common;

my $opt_conf;
my $opt_debug;
my $opt_force;
my $opt_help;
my $opt_manual;

##############################################################################
# Subroutines
##############################################################################

# ----------------------------------------------------------------------
# Read a picture from a table and write it to disk

sub export_picture {
    my ($pid, $group) = @_;

    create_picture_dirs($group, 'raw');

    my $sel = 'SELECT pictures_raw.picture, picture_types.file_type ';
    $sel .= 'FROM pictures_raw ';
    $sel .= 'JOIN picture_types ';
    $sel .= 'ON (picture_types.mime_type = pictures_raw.mime_type) ';
    $sel .= 'WHERE pid = ? ';
    dbg($sel) if $CONF->debug;
    my $sth = $DBH->prepare($sel);
    $sth->execute($pid);
    if ($sth->err) {
        sql_die($sel, $sth->err, $sth->errstr);
    }

    my $cnt = 0;
    if (my $row = $sth->fetchrow_hashref) {
        my $file_type = $row->{file_type};
        my $out_path = pid_to_path($pid, $group, 'raw', $file_type);
        if ($opt_force || !-e $out_path) {
            print "  Writing file: $out_path\n";
            open PF, '>', $out_path
              or msg('fatal', "Problem opening $out_path for writing");
            print PF $row->{picture}
              or msg('fatal', "Problem writing to $out_path");
            close PF
              or msg('fatal', "Problem closing $out_path");
            queue_action_set($pid, 'SIZE');
            queue_action_set($pid, 'INFO');
        }
        $cnt++;
    }
    if ($cnt == 0) {
        msg('warn', "Picture not found for $pid in size raw");
    }

    return;
}

# ----------------------------------------------------------------------
# process the files

sub read_and_write {
    my ($start, $end) = @_;
    my @sql_params = ();

    # Get sizes to write
    my %psizes = get_picture_sizes();

    # -- get a list of picture ids

    my $sel = "SELECT * FROM pictures_information ";
    if ($start && $end) {
        $sel .= 'WHERE pid >= ? AND pid <= ? ';
        @sql_params = ($start, $end);
    }
    $sel .= 'ORDER BY pid';
    my $sth = $DBH->prepare($sel);
    if ($CONF->debug) {
        dbg($sel);
    }

    $sth->execute(@sql_params);
    if ($sth->err) {
        sql_die($sel, $sth->err, $sth->errstr);
    }

    while (my $row = $sth->fetchrow_hashref) {
        print "Processing $row->{'picture_lot'} $row->{'pid'}\n";
        export_picture($row->{pid}, $row->{picture_lot});
    }
}

##############################################################################
# Main Routine
##############################################################################

print ">>> ring-db2files\n";

# -- get options
GetOptions(
    'conf=s' => \$opt_conf,
    'debug'  => \$opt_debug,
    'force'  => \$opt_force,
    'help'   => \$opt_help,
    'manual' => \$opt_manual
);

# -- help the poor souls out
if (@ARGV && $ARGV[0] == 'help') {
    $opt_help = 1;
}
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

get_config($opt_conf);

if ($opt_debug) {
    $CONF->debug($opt_debug);
}

# -- Open up connections to the MySQL data
db_connect();

my $start = $ARGV[0];
my $end   = $ARGV[1];
if ($start < 1) {
    $start = '';
    $end   = '';
}
if ($start && !$end) {
    $end = $start;
}

read_and_write($start, $end);

db_disconnect;

exit;

__END__

=head1 NAME

ring-db2files

=head1 SYNOPSIS

ring-db2files [properties-file] [--debug] [--help] [--manual]

=head1 DESCRIPTION

This is a conversion script that moves from the rings database schema
where pictures are stored as blobs in the database to the rings where
only meta data is stored in the database and the pictures are stored
as files on disk.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --help

Displays help text.

=item --manual

Displays more complete help text.

=item --debug

Turns on debugging displays.

=back

=head1 AUTHOR

Bill MacAllister <bill@ca-zephyr.org>

=cut
