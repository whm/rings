#!/usr/bin/perl

# File: ring-resize
# Author: Bill MacAllister

use strict;
use Cwd;
use DBI;
use Getopt::Long;
use Image::ExifTool 'ImageInfo';
use Image::Magick;
use Pod::Usage;
use Rings::Common;

my %SIZE_IDS   = ();

our $opt_conf;
our $opt_debug;
our $opt_help;
our $opt_manual;

##############################################################################
# Subroutines
##############################################################################

# ------------------------------------------------------------------------
# Read the raw file, scale the pictures, store the results

sub read_and_update {
    my ($pid_start, $pid_end) = @_;

    my %pid_list;

    # get a list of pids first

    my $sel = "SELECT pid, picture_lot ";
    $sel .= "FROM pictures_information ";
    $sel .= "WHERE pid >= $pid_start ";
    if ($pid_end >= $pid_start) {
        $sel .= "AND pid <= $pid_end ";
    }
    $sel .= "ORDER BY pid ";
    my $sth = $dbh->prepare ($sel);
    if ($opt_debug) {dbg($sel);}
    $sth->execute();
    my $cnt = 0;
    while (my $row = $sth->fetchrow_hashref) {
        $cnt++;
        $pid_list{$row->{pid}} = $row->{picture_lot};
    }
    dbg ("$cnt pictures to process");

    # process the pictures

    my $cnt = 0;
    foreach my $i (sort keys %pid_list) {
        dbg ("Processing $pid_list{$i} $i ...");

        # Get the raw picture
        my $pic_path
          = $CONF->picture_root . '/' . $pid_list{$i}
          . '/' . $pid_list{$i}
          . "/raw/${i}.jpg";
        if (!-e $pic_path) {
            msg('error', "Raw picture not found for $i");
            next;
        }

        my $raw = read_file("$a_file", binmode => ':raw');

        foreach my $s (sort keys %SIZE_IDS) {
            if ($s ne 'raw') {
                my $pic = create_picture($pid, $s, $raw, $pic{'MIMEType'});
                my $ppath = create_picture_dirs($pid_list{$i}, $s);
                my $pfile = "${ppath}/${pid}.${a_filetype}";
                if (!-e $pfile || $opt_force) {
                    open(my $fh, '>', $pfile);
                    print $fh $pic;
                    close $fh;
                }
            }
        }
    }
    return;
}

# -------------
# Main routine
# -------------

print ">>> ring-resize     v:23-Oct-2016\n";

# -- get options
GetOptions(
    'conf=s'     => \$opt_conf,
    'debug'      => \$opt_debug,
    'help'       => \$opt_help,
    'manual'     => \$opt_manual
);

# -- help the poor souls out
if (!@ARGV || $ARGV[0] == 'help') {
    $opt_help = 1;
}
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

# Set the picture range to process from the command line
my $pid_start = $ARGV[0];
if ($pid_start < 1) {
    pod2usage(-verbose => 0);
}
my $pid_end = $pid_start;
if ($ARGV[1]) {
    $pid_end = $ARGV[1];
}

# Get configuration settings and initial debugging if requested.
get_config($opt_conf);
if ($opt_debug) {
    $CONF->debug($opt_debug);
}
if ($CONF->debug) {
    dbg("Initialize timer.");
}

# Open up connections to the MySQL data
db_connect();
%SIZE_IDS = get_picture_sizes();

read_and_update($pid_start, $pid_end);

exit;

__END__

=head1 NAME

ring-resize

=head1 SYNOPSIS

ring-resize <start pid> [<end pid>] [--debug] [--help] [--manual]

=head1 DESCRIPTION

Resize pictures in the rings database.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --start=int

The picture id to start at.  Required.

=item --send=int

The picture id to end at.

=item --host=mysql-hostname

MySQL host name.  If not specified then localhost is used.

=item --db=databasename

The name of the MySQL database.  If not specified then rings is used.

=item --user=mysql-username

MySQL username.  Required.

=item --host=mysql-password

MySQL password.  Required.

=item --update

Actually load the data into the rings database.

=item --dateupdate

Update the date taken and picture size in the data base if they
are available in the image.

=item --help

Displays help text.

=item --manual

Displays more complete help text.

=item --debug

Turns on debugging displays.

=back

=head1 AUTHOR

Bill MacAllister <bill@macallister.grass-valley.ca.us>

=cut
