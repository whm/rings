#!/usr/bin/perl

# File: ring-resize
# Author: Bill MacAllister

use strict;
use Cwd;
use DBI;
use Getopt::Long;
use Image::ExifTool 'ImageInfo';
use Image::Magick;
use Pod::Usage;
use Rings::Common;

my %SIZE_IDS = ();

my $opt_conf;
my $opt_debug;
my $opt_force;
my $opt_help;
my $opt_manual;
my $opt_sleep;

##############################################################################
# Subroutines
##############################################################################

# ------------------------------------------------------------------------
# Look up a list of pids to process and run a hash of pids and
# picture_lots.

sub get_pids {
    my ($pid_start, $pid_end) = @_;

    my %pid_list = ();

    if ($pid_start == 'pending') {
        my $sel = 'SELECT pictures_information.pid, ';
        $sel .= 'pictures_information.picture_lot ';
        $sel .= 'FROM pictures_information ';
        $sel .= 'JOIN picture_resize_queue ';
        $sel .= 'ON (picture_resize_queue.pid = pictures_information.pid) ';
        $sel .= "WHERE picture_resize_queue.pid = 'PENDING' ";
        $sel .= 'ORDER BY pid ';
        if ($opt_debug) {
            dbg($sel);
        }

        my $sth = $DBH->prepare($sel);
        $sth->execute();
        while (my $row = $sth->fetchrow_hashref) {
            $pid_list{ $row->{pid} } = $row->{picture_lot};
        }
    } else {
        my $sel = 'SELECT pid, picture_lot ';
        $sel .= 'FROM pictures_information ';
        $sel .= 'WHERE pid >= ? AND pid <= ? ';
        $sel .= 'ORDER BY pid ';
        if ($opt_debug) {
            dbg($sel);
        }

        my $sth = $DBH->prepare($sel);
        $sth->execute($pid_start, $pid_end);
        while (my $row = $sth->fetchrow_hashref) {
            $pid_list{ $row->{pid} } = $row->{picture_lot};
        }
    }

    return %pid_list;
}

# ------------------------------------------------------------------------
# Look up a list of pids to process and run a hash of pids and
# picture_lots.

sub update_queue_status {
    my ($pid) = @_;

    my $sel = 'DELETE FROM picture_resize_queue ';
    $sel .= 'WHERE pid = ? ';
    if ($opt_debug) {
        dbg($sel);
    }

    my $sth = $DBH->prepare($sel);
    $sth->execute($pid);

    return;
}

# ------------------------------------------------------------------------
# Read the raw file, scale the pictures, store the results

sub read_and_update {
    my %pid_list = @_;

    # process the pictures

    my $cnt = 0;
    foreach my $pid (sort keys %pid_list) {
        dbg("Processing $pid_list{$pid} $pid ...");

        # Get the raw picture
        my $pic_path
          = $CONF->picture_root . '/'
          . $pid_list{$pid} . '/'
          . $pid_list{$pid}
          . "/raw/${pid}.jpg";
        if (!-e $pic_path) {
            msg('error', "Raw picture not found for $pid");
            next;
        }

        my $raw       = read_file("$pic_path", binmode => ':raw');
        my $mime_type = 'image/jpeg';
        my $file_type = '.jpg';
        foreach my $s (sort keys %SIZE_IDS) {
            if ($s ne 'raw') {
                my $pic = create_picture($pid, $s, $raw, $mime_type);
                my $ppath = create_picture_dirs($pid_list{$pid}, $s);
                my $pfile = "${ppath}/${pid}.${file_type}";
                if (!-e $pfile || $opt_force) {
                    open(my $fh, '>', $pfile);
                    print $fh $pic;
                    close $fh;
                }
            }
        }
        update_queue_status($pid);
    }
    return;
}

##############################################################################
# Main Routine
##############################################################################

print ">>> ring-resize  v:23-Oct-2016\n";

# -- get options
GetOptions(
    'conf=s'  => \$opt_conf,
    'debug'   => \$opt_debug,
    'force'   => \$opt_force,
    'help'    => \$opt_help,
    'manual'  => \$opt_manual,
    'sleep=i' => \$opt_sleep
);

# help the poor souls out
if (!@ARGV || $ARGV[0] == 'help') {
    $opt_help = 1;
}
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

# Set the picture range to process from the command line
my $pid_start = 'pending';
if ($ARGV[0]) {
    $pid_start = $ARGV[0];
    if ($pid_start < 1 && $pid_start ne 'pending') {
        pod2usage(-verbose => 0);
    }
}
my $pid_end = $pid_start;
if ($ARGV[1]) {
    $pid_end = $ARGV[1];
}

# Get configuration settings and initial debugging if requested.
get_config($opt_conf);
if ($opt_debug) {
    $CONF->debug($opt_debug);
}
if ($CONF->debug) {
    dbg("Initialize timer.");
}

# Open up connections to the MySQL data
db_connect();
%SIZE_IDS = get_picture_sizes();

my $loop = 1;
while ($loop) {
    if (!$opt_sleep) {
        $loop = 0;
    }
    my %pid_list = get_pids($pid_start, $pid_end);
    if (keys %pid_list > 0) {
        read_and_update(%pid_list);
    } else {
        sleep $opt_sleep;
    }
}

db_disconnect();

exit;

__END__

=head1 NAME

ring-resize

=head1 SYNOPSIS

ring-resize <start pid>|pending [<end pid>] [--debug] [--help] [--manual]

=head1 DESCRIPTION

Resize pictures in the rings database.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --start=int

The picture id to start at.  Required.

=item --send=int

The picture id to end at.

=item --host=mysql-hostname

MySQL host name.  If not specified then localhost is used.

=item --db=databasename

The name of the MySQL database.  If not specified then rings is used.

=item --user=mysql-username

MySQL username.  Required.

=item --host=mysql-password

MySQL password.  Required.

=item --update

Actually load the data into the rings database.

=item --dateupdate

Update the date taken and picture size in the data base if they
are available in the image.

=item --help

Displays help text.

=item --manual

Displays more complete help text.

=item --debug

Turns on debugging displays.

=back

=head1 AUTHOR

Bill MacAllister <bill@macallister.grass-valley.ca.us>

=cut
