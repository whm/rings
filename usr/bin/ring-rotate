#!/usr/bin/perl
#
# Copyright (c) 2016, Bill MacAllister <bill@ca-zephyr.org>
# File: ring-rotate
# Description: rotate a picture in the database

use strict;
use Cwd;
use DBI;
use File::Copy;
use File::Slurp;
use File::Temp;
use Getopt::Long;
use Image::Magick;
use Pod::Usage;
use Rings::Common;

my %prefs;
my %tableList;

my $opt_conf;
my $opt_debug;
my $opt_help;
my $opt_left;
my $opt_manual;
my $opt_right;

##############################################################################
# Subroutines
##############################################################################

# ------------------------------------------------
# Rotate the pictures

sub read_and_update {
    my ($pid_start, $pid_end) = @_;

    my $sel = 'SELECT pictures_information.pid, ';
    $sel .= 'pictures_information.picture_lot, ';
    $sel .= 'pictures_raw.mime_type, ';
    $sel .= 'picture_types.file_type ';
    $sel .= 'FROM pictures_information ';
    $sel .= 'JOIN pictures_raw ';
    $sel .= 'ON (pictures_raw.pid = pictures_information.pid) ';
    $sel .= 'JOIN picture_types ';
    $sel .= 'ON (picture_types.mime_type = pictures_raw.mime_type) ';
    $sel .= 'WHERE pictures_information.pid >= ? ';
    $sel .= 'AND pictures_information.pid <= ? ';
    $sel .= 'ORDER BY pictures_information.pid ';
    if ($CONF->debug) {
        dbg($sel);
    }

    my $sth = $DBH->prepare($sel);
    $sth->execute($pid_start, $pid_end);
    if ($sth->err) {
        print("INFO: problem sql: $sel");
        die "ERROR: $sth->err - $sth->errstr \n";
    }
    while (my $row = $sth->fetchrow_hashref) {
        my $pid       = $row->{pid};
        my $lot       = $row->{picture_lot};
        my $file_type = $row->{file_type};
        my $pic_file  = "${pid}.${file_type}";
        my $pic_path  = $CONF->picture_root . "/$lot/raw/$pid.$file_type";

        my $old_blob = read_file($pic_path, binmode => ':raw');
        my @blob;
        $blob[0] = $old_blob;
        my $this_pic = Image::Magick->New();
        $this_pic->BlobToImage(@blob);
        if ($opt_right) {
            msg('info', "Rotating $pid right");
            $this_pic->Rotate(degrees => 90);
        } else {
            msg('info', "Rotating $pid left");
            $this_pic->Rotate(degrees => -90);
        }
        my @new_pic     = $this_pic->ImageToBlob();
        my $width       = $this_pic->Get('width');
        my $height      = $this_pic->Get('height');
        my $size        = $this_pic->Get('filesize');
        my $format      = $this_pic->Get('format');
        my $compression = $this_pic->Get('compression');
        my $signature   = $this_pic->Get('signature');

        # update size and signature in pictures_information
        my $cmd = 'UPDATE pictures_information SET ';
        $cmd .= 'raw_picture_size = ?, ';
        $cmd .= 'raw_signature = ?, ';
        $cmd .= 'date_last_maint = NOW() ';
        $cmd .= 'WHERE pid = ? ';
        if ($CONF->debug) {
            dbg($cmd);
        }
        my $sth_update = $DBH->prepare($cmd);
        $sth_update->execute($size, $signature, $pid);
        if ($sth_update->err) {
            print("INFO: problem sql: $cmd");
            die "ERROR: $sth_update->err - $sth_update->errstr \n";
        }

        # Update signature, width, height, size, format, compression
        # in pictures_raw
        $cmd = 'UPDATE pictures_raw SET ';
        $cmd .= 'signature = ?, ';
        $cmd .= 'width = ?, ';
        $cmd .= 'height = ?, ';
        $cmd .= 'size = ?, ';
        $cmd .= 'format = ?, ';
        $cmd .= 'compression = ?, ';
        $cmd .= 'date_last_maint = NOW() ';
        $cmd .= 'WHERE pid = ? ';
        if ($CONF->debug) {
            dbg($cmd);
        }
        my $sth_update = $DBH->prepare($cmd);
        $sth_update->execute(
            $signature, $width,       $height, $size,
            $format,    $compression, $pid
        );
        if ($sth_update->err) {
            print("INFO: problem sql: $cmd");
            die "ERROR: $sth_update->err - $sth_update->errstr \n";
        }

        # copy a backup just in case
        my $pic_tmp = File::Temp::tempnam('/tmp', $pic_file . 'XXXXXXX');
        copy($pic_path, $pic_tmp) or die("ERROR: creating $pic_tmp $!");

        # store the file
        open(my $fh, '>', $pic_path)
          or die("ERROR: problem opening $pic_path");
        print $fh $new_pic[0];
        close $fh;

        # That the associated pictures be regenerated.
        queue_action_set($pid, 'SIZE');

        # delete the tmp file is we thing everything is okay
        if (-e $pic_file) {
            unlink $pic_tmp;
        }
    }
    return;
}

##############################################################################
# Main Routine
##############################################################################

# -- get options
GetOptions(
    'conf=s' => \$opt_conf,
    'debug'  => \$opt_debug,
    'help'   => \$opt_help,
    'left'   => \$opt_left,
    'manual' => \$opt_manual,
    'right'  => \$opt_right
);

# help the poor souls out
if (@ARGV && $ARGV[0] == 'help') {
    $opt_help = 1;
}
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

get_config($opt_conf);

# Set the picture range to process from the command line
my $pid_start = $ARGV[0];
if ($pid_start < 1) {
    pod2usage(-verbose => 0);
}
my $pid_end = $pid_start;
if ($ARGV[1]) {
    $pid_end = $ARGV[1];
}

if ($opt_debug) {
    $CONF->debug($opt_debug);
}
if ($CONF->debug) {
    dbg("Initialize timer.");
}

# -- Open up connections to the MySQL data
db_connect();

read_and_update($pid_start, $pid_end);

exit;

__END__

=head1 NAME

ring-rotate

=head1 SYNOPSIS

ring-rotate [--right] [--left] [--debug] [--help] [--manual] <pid>

=head1 DESCRIPTION

Rotate pictures in the rings database.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --right

Rotate the picture 90 degrees.

=item --left

Rotate the picture -90 degrees

=item --help

Displays help text.

=item --manual

Displays more complete help text.

=item --debug

Turns on debugging displays.

=back

=head1 AUTHOR

Bill MacAllister <bill@ca-zephyr.org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2016, Bill MacAllister <bill@ca-zephyr.org>.

This code is free software; you can redistribute it and/or modify it
under the same terms as Perl. For more details, see the full
text of the at https://opensource.org/licenses/Artistic-2.0.

This program is distributed in the hope that it will be
useful, but without any warranty; without even the implied
warranty of merchantability or fitness for a particular purpose.

=cut
