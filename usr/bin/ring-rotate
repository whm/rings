#!/usr/bin/perl
#
# ring-rotate - rotate a picture in the database

use strict;
use Cwd;
use DBI;
use File::Copy;
use File::Slurp;
use Getopt::Long;
use Image::Magick;
use Pod::Usage;
use Rings::Common;

my %prefs;
my %tableList;

my $opt_conf;
my $opt_debug;
my $opt_help;
my $opt_left;
my $opt_manual;
my $opt_right;

##############################################################################
# Subroutines
##############################################################################

# ------------------------------------------------
# Rotate the pictures

sub read_and_update {
    my ($pid_start, $pid_end) = @_;

    my $sel = 'SELECT pid, picture_lot ';
    $sel .= 'FROM pictures_information ';
    $sel .= 'WHERE pid >= ? AND pid <= ? ';
    $sel .= 'ORDER BY pid ';
    if ($opt_debug) {
        dbg($sel);
    }

    my $sth = $DBH->prepare($sel);
    $sth->execute($pid_start, $pid_end);
    while (my $row = $sth->fetchrow_hashref) {
        my $pid = $row->{pid};
        my $lot = $row->{picture_lot};
        my $pic_path = create_picture_dirs($lot, 'raw');
        my $pic_file = "${pic_path}/${pid}.${a_filetype}";

        my $old_blob = read_file("$a_file", binmode => ':raw');
        my @blob;
        $blob[0] = $old_blob;
        my $this_pic = Image::Magick->New();
        $this_pic->BlobToImage(@blob);
        if ($opt_right) {
            msg('info', "Rotating $pid right");
            $this_pic->Rotate(degrees => 90);
        } else {
            msg('info', "Rotating $pid left");
            $this_pic->Rotate(degrees => -90);
        }
        my @new_pic = $this_pic->ImageToBlob();
        $width       = $new_pic->Get('width');
        $height      = $new_pic->Get('height');
        $size        = $new_pic->Get('filesize');
        $format      = $new_pic->Get('format');
        $compression = $new_pic->Get('compression');
        $signature   = $new_pic->Get('signature');

        # update size and signature in pictures_information
        my $cmd = 'INSERT INTO pictures_information SET ';
        $cmd .= 'raw_size = ?, raw_signature = ?, date_last_maint = NOW() ';
        $cmd .= 'WHERE pid = ? ';
        if ($CONF->debug) {
            dbg($cmd);
        }
        my $sth_update = $DBH->prepare($cmd);
        $sth_update->execute($size, $signature, $pid);

        # Update signature, width, height, size, format, compression
        # in pictures_raw
        $cmd = 'INSERT INTO pictures_raw SET ';
        $cmd .= 'signature = ?, width = ?, height = ?, size = ?, format = ?, ';
        $cmd .= 'compression = ?, date_last_maint = NOW() ';
        $cmd .= 'WHERE pid = ? ';
        if ($CONF->debug) {
            dbg($cmd);
        }
        my $sth_update = $DBH->prepare($cmd);
        $sth_update->execute($signature, $width, $height, $size, $format,
                             $compression, $pid);
    
        # copy a backup just in case
        
        # store the file
        open(my $fh, '>', $pic_file) or die("ERROR: problem opening $pic_file");
        print $fh $new_pic[0];
        close $fh;

        # Restore backup file is new file is zero length

        # That the associated pictures be regenerated.
        queue_status_set($pid);
    }
    return;
}

##############################################################################
# Main Routine
##############################################################################

# -- get options
GetOptions(
    'conf=s' => \$opt_conf,
    'debug'  => \$opt_debug,
    'help'   => \$opt_help,
    'left'   => \$opt_left,
    'manual' => \$opt_manual,
    'right'  => \$opt_right
);

# help the poor souls out
if (@ARGV && $ARGV[0] == 'help') {
    $opt_help = 1;
}
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

get_config($opt_conf);

# Set the picture range to process from the command line
my $pid_start = $ARGV[0];
if ($pid_start < 1) {
    pod2usage(-verbose => 0);
}
my $pid_end = $pid_start;
if ($ARGV[1]) {
    $pid_end = $ARGV[1];
}

if ($opt_debug) {
    $CONF->debug($opt_debug);
}
if ($CONF->debug) {
    dbg("Initialize timer.");
}

# -- Open up connections to the MySQL data
db_connect();

read_and_update($pid_start, $pid_end);

exit;

__END__

=head1 NAME

ring-rotate

=head1 SYNOPSIS

ring-rotate [--right] [--left] [--debug] [--help] [--manual] <pid>

=head1 DESCRIPTION

Rotate pictures in the rings database.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --right

Rotate the picture 90 degrees.

=item --left

Rotate the picture -90 degrees

=item --help

Displays help text.

=item --manual

Displays more complete help text.

=item --debug

Turns on debugging displays.

=back

=head1 AUTHOR

Bill MacAllister <bill@macallister.grass-valley.ca.us>

=cut
