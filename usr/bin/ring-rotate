#!/usr/bin/perl
#
# ring-rotate - rotate a picture in the database

use strict;
use Cwd;
use DBI;
use File::Copy;
use Getopt::Long;
use Image::Magick;
use Pod::Usage;
use Rings::Common;

my %prefs;
my %tableList;

my $opt_conf;
my $opt_debug;
my $opt_help;
my $opt_left;
my $opt_manual;
my $opt_right;

##############################################################################
# Subroutines
##############################################################################

# ------------------------------------------------------------------------
# rotate a picture

sub rotate_picture {

    my ($thisPID, $thisSeq, $thisPicture, $thisType) = @_;

    dbg(" Processing $thisPID");

    my @blob;
    $blob[0] = $thisPicture;
    my $thisPic = Image::Magick->New();
    $thisPic->BlobToImage(@blob);
    my (
        $width,         $height,            $size,
        $format,        $compression,       $camera,
        $this_datetime, $this_shutterspeed, $this_fnumber
      )
      = $thisPic->Get(
        'width',            'height',
        'filesize',         'format',
        'compression',      '%[EXIF:Model]',
        '%[EXIF:DateTime]', '%[EXIF:ExposureTime]',
        '%[EXIF:FNumber]'
      );

    # Rotate the image and create the blob to store
    if ($opt_right) {
        $thisPic->Rotate(degrees => 90);
    } else {
        $thisPic->Rotate(degrees => -90);
    }
    my @bPic = $thisPic->ImageToBlob();

    my $cmd = "UPDATE pictures_raw SET ";
    $cmd .= 'picture_type = ?,';
    $cmd .= 'width = ?,';
    $cmd .= 'height = ?,';
    $cmd .= 'picture = ?,';
    $cmd .= 'date_last_maint = ? ';
    $cmd .= 'WHERE pid = ? ';
    if ($opt_debug) {
        dbg($cmd);
    }

    my $sth_update = $DBH_UPDATE->prepare($cmd);
    $sth_update->execute($thisType, $height, $width, $bPic[0], sql_datetime(),
        $thisPID);
    return;
}

# ------------------------------------------------
# process the files

sub read_and_update {
    my ($pid_start, $pid_end) = @_;

    my %pidList;

    # get a list of pids first

    my $sel = "SELECT pid,";
    $sel .= "file_name ";
    $sel .= "FROM pictures_information ";
    $sel .= "WHERE pid >= $pid_start AND pid <= $pid_end ";
    $sel .= "ORDER BY pid ";
    if ($opt_debug) {
        dbg($sel);
    }

    my $sth = $DBH->prepare($sel);
    $sth->execute();
    my $cnt = 0;
    while (my $row = $sth->fetchrow_hashref) {
        $cnt++;
        $pidList{ $row->{pid} } = $row->{file_name};
    }
    dbg("$cnt pictures to process");

    # process the pictures

    my $cnt = 0;
    for my $i (sort keys %pidList) {
        dbg("Processing $pidList{$i}...");

        my $sel = "SELECT ";
        $sel .= "picture_type,";
        $sel .= "picture ";
        $sel .= "FROM pictures_raw ";
        $sel .= "WHERE pid = $i ";
        if ($opt_debug) {
            dbg($sel);
        }

        my $sth = $DBH->prepare($sel);
        $sth->execute();
        if (my $row = $sth->fetchrow_hashref) {
            rotate_picture($i, $cnt, $row->{picture}, $row->{picture_type});
        }
    }
}

# -------------
# Main routine
# -------------

print ">>> ring-rotate    v:29-Oct-2016\n";

# -- get options
GetOptions(
    'conf=s' => \$opt_conf,
    'debug'  => \$opt_debug,
    'help'   => \$opt_help,
    'left'   => \$opt_left,
    'manual' => \$opt_manual,
    'right'  => \$opt_right
);

# help the poor souls out
if (@ARGV && $ARGV[0] == 'help') {
    $opt_help = 1;
}
if ($opt_help) {
    pod2usage(-verbose => 0);
}
if ($opt_manual) {
    pod2usage(-verbose => 2);
}

get_config($opt_conf);

# Set the picture range to process from the command line
my $pid_start = $ARGV[0];
if ($pid_start < 1) {
    pod2usage(-verbose => 0);
}
my $pid_end = $pid_start;
if ($ARGV[1]) {
    $pid_end = $ARGV[1];
}

if ($opt_debug) {
    $CONF->debug($opt_debug);
}
if ($CONF->debug) {
    dbg("Initialize timer.");
}

# -- Open up connections to the MySQL data
db_connect();

read_and_update($pid_start, $pid_end);

exit;

__END__

=head1 NAME

ring-rotate

=head1 SYNOPSIS

ring-rotate [--right] [--left] [--debug] [--help] [--manual] <pid>

=head1 DESCRIPTION

Rotate pictures in the rings database.

=head1 OPTIONS AND ARGUMENTS

=over 4

=item --right

Rotate the picture 90 degrees.

=item --left

Rotate the picture -90 degrees

=item --help

Displays help text.

=item --manual

Displays more complete help text.

=item --debug

Turns on debugging displays.

=back

=head1 AUTHOR

Bill MacAllister <bill@macallister.grass-valley.ca.us>

=cut
